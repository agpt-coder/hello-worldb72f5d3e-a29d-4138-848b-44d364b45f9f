from typing import Dict, List

import prisma
import prisma.models
from pydantic import BaseModel


class GetApiDocsRequest(BaseModel):
    """
    Request model for fetching the API documentation. This endpoint has no input parameters.
    """

    pass


class APIDocumentation(BaseModel):
    """
    Represents the documentation for a single API endpoint.
    """

    id: int
    endpoint: str
    method: str
    description: str
    request: Dict
    response: Dict


class ApiDocsResponse(BaseModel):
    """
    Response model for the API documentation. This will include the request and response documentation for all available endpoints.
    """

    documentation: List[APIDocumentation]


async def get_api_documentation(request: GetApiDocsRequest) -> ApiDocsResponse:
    """
    Fetches the complete API documentation including requests and responses for all available endpoints.
    This requires consolidating documentation generated by HelloWorldHandler and HealthCheckHandler.

    Args:
    request (GetApiDocsRequest): Request model for fetching the API documentation. This endpoint has no input parameters.

    Returns:
    ApiDocsResponse: Response model for the API documentation. This will include the request
    and response documentation for all available endpoints.

    Example:
        request = GetApiDocsRequest()
        response = await get_api_documentation(request)
        > ApiDocsResponse(documentation=[APIDocumentation(...), ...])
    """
    api_docs = await prisma.models.APIDocumentation.prisma().find_many()
    documentation = []
    for doc in api_docs:
        documentation.append(
            APIDocumentation(
                id=doc.id,
                endpoint=doc.endpoint,
                method=doc.method,
                description=doc.description,
                request=doc.request,
                response=doc.response,
            )
        )
    response = ApiDocsResponse(documentation=documentation)
    return response
